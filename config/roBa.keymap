#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4 // 各自のマウスレイヤーに合わせて設定

&sl { release-after-ms = <250>; }; // ダブルクリックに必要な時間を設定
/ {
    macros {
        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl MOUSE>;

            label = "MKP_EXIT_AML";
        };
    };

    keymap {
        // マウスレイヤーに &mkp_exit_AML LCLK 等割り当て
    };
};

#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        nobasi {
            bindings = <&kp MINUS>;
            key-positions = <8 9>;
        };

        bikkuri {
            bindings = <&kp EXCLAMATION>;
            key-positions = <20 21>;
        };

        hatena {
            bindings = <&kp QUESTION>;
            key-positions = <33 32>;
        };

        atto {
            bindings = <&kp AT_SIGN>;
            key-positions = <7 6>;
        };

        koron {
            bindings = <&kp COLON>;
            key-positions = <18 19>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        alt_p: alt-positive {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp TAB>;

            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        alt_n: alt-negative {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp 0>, <&kp LS(TAB)>;

            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp L         &kp U         &kp COMMA                    &kp PERIOD                                                     &kp F        &kp W  &lt 5 R  &kp Y  &lt 5 P
&kp E             &kp I         &kp A         &kp O                        &kp MINUS      &kp LS(LG(S))                    &kp COLON      &kp K        &kp T  &kp N    &kp S  &kp H
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp SEMICOLON  &kp TAB                          &kp SEMICOLON  &kp G        &kp D  &kp M    &kp J  &kp B
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 1 LANGUAGE_2  &lt 2 SPACE    &lt_to_layer_0 3 LANGUAGE_1      &kp BACKSPACE  &lt 6 ENTER                         &kp DEL
            >;

            sensor-bindings = <&scroll_up_down>;
            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION {
            bindings = <
&trans         &kp AMPERSAND    &kp ASTERISK  &trans  &trans                                &kp LS(ASTERISK)   &kp LS(N9)            &trans    &trans          &trans
&kp TILDE      &kp DOLLAR       &kp PERCENT   &trans  &trans  &trans      &kp LESS_THAN     &kp RIGHT_BRACE    &kp PIPE              &kp SEMI  &kp LEFT_BRACE  &trans
&kp LS(MINUS)  &kp EXCLAMATION  &kp QUESTION  &trans  &trans  &trans      &kp GREATER_THAN  &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH  &kp SQT   &kp AT_SIGN     &trans
&trans         &trans           &trans        &trans  &trans  &trans      &trans            &trans                                                             &trans
            >;
        };

        NUM {
            bindings = <
&kp F1                      &kp F2           &kp F3           &kp F4           &kp F5                                                     &kp N7        &kp N8        &kp N9        &kp SLASH     &kp MINUS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp KP_NUMLOCK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp PLUS
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp NUMBER_0    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp BACKSPACE
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                  &kp ENTER
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                            &trans    &trans          &kp UP_ARROW    &trans           &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &kp LA(TAB)      &trans  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &kp LA(TAB)      &trans  &trans    &trans          &trans          &trans           &trans
&trans          &trans                  &trans          &trans                   &trans   &trans           &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&none>;
            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q  &to_layer_0 W  &to_layer_0 E  &to_layer_0 R  &to_layer_0 T                         &to_layer_0 Y  &to_layer_0 U  &lt 5 I   &to_layer_0 O  &lt 5 P
&to_layer_0 A  &to_layer_0 S  &to_layer_0 D  &to_layer_0 F  &to_layer_0 G  &trans      &kp LC(V)  &to_layer_0 H  &mkp MB1       &mkp MB3  &mkp MB2       &trans
&to_layer_0 Z  &to_layer_0 X  &to_layer_0 C  &to_layer_0 V  &to_layer_0 B  &trans      &kp LC(C)  &to_layer_0 N  &mkp MB4       &trans    &mkp MB5       &kp LC(Z)
&trans         &trans         &trans         &trans         &trans         &trans      &trans     &trans                                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
